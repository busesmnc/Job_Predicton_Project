import pandas as pd
from sklearn.preprocessing import MultiLabelBinarizer, LabelEncoder
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

print("📥 Veriler yükleniyor...")
df = pd.read_csv("/Users/busesomunncu/Desktop/Linkedln Job Prediction Project/final_enriched_dataset.csv")

# -------------------------------
# 1. KATEGORİ GRUPLAMA
# -------------------------------
print("🔢 Kategoriler gruplandırılıyor...")

category_group_map = {
    1: 1, 2: 1, 4: 1,                     # Software & Web Dev
    3: 2, 17: 2,                          # Data & AI
    5: 3, 8: 3, 9: 3, 10: 3,              # IT & Support
    6: 4, 12: 4,                          # DevOps & Reliability
    7: 5,                                 # Cybersecurity
    11: 6, 13: 6, 14: 6, 15: 6, 16: 6,    # Embedded & Hardware
    18: 7, 21: 7,                         # Product & Project Mgmt
    19: 8, 20: 8, 22: 8, 23: 8,           # Business & Analysis
    24: 9, 25: 9, 26: 9, 29: 9,           # Sales & Operations
    27: 10, 28: 10, 30: 10                # Other
}
df['grouped_category_id'] = df['category_id'].map(category_group_map)

# -------------------------------
# 2. ÖZELLİK MÜHENDİSLİĞİ
# -------------------------------
print("Özellikler işleniyor...")

multi_hot_columns = [
    'predicted_tech_requirements',
    'predicted_soft_skills',
    'predicted_domain_knowledge',
    'predicted_project_experience',
    'predicted_certifications'
]

label_encoded_columns = [
    'predicted_experience_level',
    'predicted_education_requirement'
]

multi_hot_encoded_dfs = []
for col in multi_hot_columns:
    df[col] = df[col].fillna('').apply(
        lambda x: x if isinstance(x, list) else [item.strip() for item in x.split(',')] if x else []
    )
    mlb = MultiLabelBinarizer()
    encoded = pd.DataFrame(mlb.fit_transform(df[col]), columns=[f"{col}__{cls}" for cls in mlb.classes_])
    multi_hot_encoded_dfs.append(encoded)

label_encoded_dfs = []
for col in label_encoded_columns:
    df[col] = df[col].apply(lambda x: x[0] if isinstance(x, list) and len(x) > 0 else (x if isinstance(x, str) else 'Unknown'))
    le = LabelEncoder()
    df[col] = df[col].fillna('Unknown')
    encoded = pd.DataFrame(le.fit_transform(df[col]), columns=[col])
    label_encoded_dfs.append(encoded)

# TF-IDF uygulama
print("📄 job_description metni TF-IDF ile vektörleştiriliyor...")
df['job_description'] = df['job_description'].fillna('')
tfidf = TfidfVectorizer(max_features=300, stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['job_description'])
tfidf_df = pd.DataFrame(tfidf_matrix.toarray(), columns=[f"tfidf_{word}" for word in tfidf.get_feature_names_out()])

# Tüm özellikleri birleştir
X = pd.concat(multi_hot_encoded_dfs + label_encoded_dfs + [tfidf_df.reset_index(drop=True)], axis=1)
y = df['grouped_category_id']

# -------------------------------
# 3. TRAIN-TEST AYIRIMI
# -------------------------------
print("🧪 Eğitim ve test seti hazırlanıyor...")
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# -------------------------------
# 4. LOGISTIC REGRESSION
# -------------------------------
print("🧮 Logistic Regression eğitiliyor...")
log_model = LogisticRegression(max_iter=1000, multi_class='multinomial', solver='lbfgs')
log_model.fit(X_train, y_train)
y_pred_log = log_model.predict(X_test)
log_accuracy = accuracy_score(y_test, y_pred_log)
log_report = classification_report(y_test, y_pred_log, zero_division=0)

# -------------------------------
# 5. RANDOM FOREST
# -------------------------------
print("🌲 Random Forest eğitiliyor...")
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)
rf_accuracy = accuracy_score(y_test, y_pred_rf)
rf_report = classification_report(y_test, y_pred_rf, zero_division=0)

# -------------------------------
# 6. SONUÇLAR
# -------------------------------
print("\n🎯 KARŞILAŞTIRMA SONUÇLARI")
print(f"\n✅ Logistic Regression Accuracy: {log_accuracy:.4f}")
print("📋 Logistic Regression Classification Report:")
print(log_report)

print(f"\n✅ Random Forest Accuracy: {rf_accuracy:.4f}")
print("📋 Random Forest Classification Report:")
print(rf_report)

üçüncü_deneme = """
import pandas as pd
from sklearn.preprocessing import MultiLabelBinarizer, LabelEncoder
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

print("📥 Veriler yükleniyor...")
df = pd.read_csv("/Users/busesomunncu/Desktop/Linkedln Job Prediction Project/final_enriched_dataset.csv")

# -------------------------------
# 1. KATEGORİ GRUPLAMA
# -------------------------------
print("🔢 Kategoriler gruplandırılıyor...")

category_group_map = {
    1: 1, 2: 1, 4: 1,                     # Software & Web Dev
    3: 2, 17: 2,                          # Data & AI
    5: 3, 8: 3, 9: 3, 10: 3,              # IT & Support
    6: 4, 12: 4,                          # DevOps & Reliability
    7: 5,                                 # Cybersecurity
    11: 6, 13: 6, 14: 6, 15: 6, 16: 6,    # Embedded & Hardware
    18: 7, 21: 7,                         # Product & Project Mgmt
    19: 8, 20: 8, 22: 8, 23: 8,           # Business & Analysis
    24: 9, 25: 9, 26: 9, 29: 9,           # Sales & Operations
    27: 10, 28: 10, 30: 10                # Other
}
df['grouped_category_id'] = df['category_id'].map(category_group_map)

# -------------------------------
# 2. ÖZELLİK MÜHENDİSLİĞİ
# -------------------------------

print("🛠️ Özellikler işleniyor...")

multi_hot_columns = [
    'predicted_tech_requirements',
    'predicted_soft_skills',
    'predicted_domain_knowledge',
    'predicted_project_experience',
    'predicted_certifications'
]

label_encoded_columns = [
    'predicted_experience_level',
    'predicted_education_requirement'
]

# Multi-hot encoding
multi_hot_encoded_dfs = []
for col in multi_hot_columns:
    df[col] = df[col].fillna('').apply(
        lambda x: x if isinstance(x, list) else [item.strip() for item in x.split(',')] if x else []
    )
    mlb = MultiLabelBinarizer()
    encoded = pd.DataFrame(mlb.fit_transform(df[col]), columns=[f"{col}__{cls}" for cls in mlb.classes_])
    multi_hot_encoded_dfs.append(encoded)

# Label encoding
label_encoded_dfs = []
for col in label_encoded_columns:
    df[col] = df[col].apply(lambda x: x[0] if isinstance(x, list) and len(x) > 0 else (x if isinstance(x, str) else 'Unknown'))
    le = LabelEncoder()
    df[col] = df[col].fillna('Unknown')
    encoded = pd.DataFrame(le.fit_transform(df[col]), columns=[col])
    label_encoded_dfs.append(encoded)

# TF-IDF (job_description)
print("📄 job_description metni TF-IDF ile vektörleştiriliyor...")
df['job_description'] = df['job_description'].fillna('')
tfidf = TfidfVectorizer(max_features=300, stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['job_description'])
tfidf_df = pd.DataFrame(tfidf_matrix.toarray(), columns=[f"tfidf_{word}" for word in tfidf.get_feature_names_out()])

# Tüm özellikleri birleştir
X = pd.concat(multi_hot_encoded_dfs + label_encoded_dfs + [tfidf_df.reset_index(drop=True)], axis=1)
y_grouped = df['grouped_category_id']

# -------------------------------
# 3. MODEL EĞİTİMİ (Random Forest)
# -------------------------------
print("🌲 Random Forest modeli eğitiliyor...")
X_train, X_test, y_train, y_test = train_test_split(
    X, y_grouped, test_size=0.2, random_state=42, stratify=y_grouped
)

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# -------------------------------
# 4. TAHMİN & METRİKLER
# -------------------------------
print("🔍 Test verisi ile tahmin yapılıyor...")
y_pred = rf_model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred, zero_division=0)

print("\n✅ MODEL SONUÇLARI:")
print(f"🎯 Accuracy: {accuracy:.4f}")
print("📋 Classification Report:")
print(report)

"""
ikinci_deneme = """
import pandas as pd
from sklearn.preprocessing import MultiLabelBinarizer, LabelEncoder
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

# -------------------------------
# 1. VERİYİ YÜKLE
# -------------------------------

df = pd.read_csv("/Users/busesomunncu/Desktop/Linkedln Job Prediction Project/final_enriched_dataset.csv")

# -------------------------------
# 2. ENCODING KATEGORİLERE GÖRE
# -------------------------------

multi_hot_columns = [
    'predicted_tech_requirements',
    'predicted_soft_skills',
    'predicted_domain_knowledge',
    'predicted_project_experience',
    'predicted_certifications'
]

label_encoded_columns = [
    'predicted_experience_level',
    'predicted_education_requirement'
]

# -------------------------------
# 3. MULTI-HOT ENCODING
# -------------------------------
multi_hot_encoded_dfs = []

for col in multi_hot_columns:
    df[col] = df[col].fillna('').apply(
        lambda x: x if isinstance(x, list) else [item.strip() for item in x.split(',')] if x else []
    )
    mlb = MultiLabelBinarizer()
    encoded = pd.DataFrame(mlb.fit_transform(df[col]), columns=[f"{col}__{cls}" for cls in mlb.classes_])
    multi_hot_encoded_dfs.append(encoded)

# -------------------------------
# 4. LABEL ENCODING
# -------------------------------
label_encoded_dfs = []

for col in label_encoded_columns:
    df[col] = df[col].apply(lambda x: x[0] if isinstance(x, list) and len(x) > 0 else (x if isinstance(x, str) else 'Unknown'))
    le = LabelEncoder()
    df[col] = df[col].fillna('Unknown')
    encoded = pd.DataFrame(le.fit_transform(df[col]), columns=[col])
    label_encoded_dfs.append(encoded)

# -------------------------------
# 5. TF-IDF: JOB DESCRIPTION
# -------------------------------
df['job_description'] = df['job_description'].fillna('')
tfidf = TfidfVectorizer(max_features=300, stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['job_description'])
tfidf_df = pd.DataFrame(tfidf_matrix.toarray(), columns=[f"tfidf_{word}" for word in tfidf.get_feature_names_out()])

# -------------------------------
# 6. TÜM ÖZELLİKLERİ BİRLEŞTİR
# -------------------------------
X = pd.concat(multi_hot_encoded_dfs + label_encoded_dfs + [tfidf_df.reset_index(drop=True)], axis=1)
y = df['category_id']

# -------------------------------
# 7. MODEL: LOGISTIC REGRESSION
# -------------------------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

model = LogisticRegression(max_iter=1000, multi_class='multinomial', solver='lbfgs')
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

# -------------------------------
# 8. PERFORMANS ÖLÇÜMÜ
# -------------------------------
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred, zero_division=0)

print(f"Accuracy: {accuracy:.4f}")
print(report)
"""
ilk_deneme = """
import pandas as pd
from sklearn.preprocessing import MultiLabelBinarizer, LabelEncoder
from sklearn.feature_extraction.text import TfidfVectorizer

# Dosyayı içe aktar
df = pd.read_csv("/Users/busesomunncu/Desktop/Linkedln Job Prediction Project/final_enriched_dataset.csv")
# -------------------------------
# 1. KATEGORİLERE GÖRE AYRIMLAR
# -------------------------------

# Multi-hot encoding yapılacak sütunlar
multi_hot_columns = [
    'predicted_tech_requirements',
    'predicted_soft_skills',
    'predicted_domain_knowledge',
    'predicted_project_experience',
    'predicted_certifications'
]

# Label encoding yapılacak sütunlar
label_encoded_columns = [
    'predicted_experience_level',
    'predicted_education_requirement'
]

# ------------------------------------------
# 2. MULTI-HOT ENCODING İŞLEMİ
# ------------------------------------------
multi_hot_encoded_dfs = []

for col in multi_hot_columns:
    # Liste değilse split ile listele
    df[col] = df[col].fillna('').apply(
        lambda x: x if isinstance(x, list) else [item.strip() for item in x.split(',')] if x else []
    )
    mlb = MultiLabelBinarizer()
    encoded = pd.DataFrame(mlb.fit_transform(df[col]), columns=[f"{col}__{cls}" for cls in mlb.classes_])
    multi_hot_encoded_dfs.append(encoded)

# ------------------------------------------
# 3. LABEL ENCODING İŞLEMİ
# ------------------------------------------
label_encoded_dfs = []

for col in label_encoded_columns:
    # Listeyse ilk öğeyi al, boşsa 'Unknown'
    df[col] = df[col].apply(lambda x: x[0] if isinstance(x, list) and len(x) > 0 else (x if isinstance(x, str) else 'Unknown'))
    le = LabelEncoder()
    df[col] = df[col].fillna('Unknown')
    encoded = pd.DataFrame(le.fit_transform(df[col]), columns=[col])
    label_encoded_dfs.append(encoded)

# ------------------------------------------
# 4. ÖZELLİKLERİ (X) BİRLEŞTİR
# ------------------------------------------
X_combined = pd.concat(multi_hot_encoded_dfs + label_encoded_dfs, axis=1)

# ------------------------------------------
# 5. HEDEF DEĞİŞKENİ (y) AYIR
# ------------------------------------------
print(X_combined)
y = df['category_id']
"""